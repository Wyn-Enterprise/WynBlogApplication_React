export interface BackendServer {
    /**
     * Wyn Server URL.
     * @example
     * url: 'http://localhost:51980/'
     */
    url: string;
    /**
     * The token needed to access the Wyn API.
     * @example
     * token: 'DA3CF35403BF9B0823A63CB2663D58E88B0B85FB588A1068753E0BDEF935B7C2'
     */
    token: string;
}
export type InitOptionBase = {
    /**
     * The portal theme
     * @example
     * theme: 'default'
     */
    theme?: string;
    /**
     * The portal language
     * @example
     * language: 'zh'
     */
    language?: string;
};
export type InitOption = {
    element: HTMLElement;
    backendServer: BackendServer;
    isDivIntegrationModel: boolean;
    pathBase?: string;
    initPath?: string;
    options?: {
        CurrentTheme?: string;
    };
};
export type destroyAble = {
    destroy: () => void;
};
export interface DocumentPortal {
    portal?: {
        init: (option: DocumentPortalInitOptionFull) => Element;
        destroy: (element: Element) => void;
    };
}
export interface ResourcePortal {
    portal?: {
        init: (option: ResourcePortalInitOptionFull) => Element;
        destroy: (element: Element) => void;
    };
}
export interface AdminPortal {
    portal?: {
        init: (option: AdminPortalInitOptionFull) => Element;
        destroy: (element: Element) => void;
    };
}
export type DocumentPortalInitOptionCore = {
    /**
     * A flag specifying whether to open document portal in mobile mode.
     * @example
     * isMobileMode: false
     */
    isMobileMode?: boolean;
    /**
     * A flag specifying whether to hide the avatar menu.
     * @example
     * hideAvatarMenu: false
     */
    hideAvatarMenu?: boolean;
    /**
     * A flag specifying whether to hide the welcome screen.
     * @example
     * hideWelcomeScreen: false
     */
    hideWelcomeScreen?: boolean;
    /**
     * A flag specifying whether to hide the navigation.
     * @example
     * hideNav: false
     */
    hideNav?: boolean;
    /**
     * A flag specifying whether to hide the navigation detail.
     * @example
     * hideNavDetail: false
     */
    hideNavDetail?: boolean;
    /**
     * A flag specifying whether to hide the navigation logo.
     * @example
     * hideNavLogo: false
     */
    hideNavLogo?: boolean;
    /**
     * A flag specifying whether to hide the primary navigation.
     * @example
     * hidePrimaryNav: false
     */
    hidePrimaryNav?: boolean;
    /**
     * The language of the document portal.
     * @example
     * lng: 'zh'
     */
    lng?: string;
    /**
     * The entry of the document portal.
     * @example
     * entry: 'home'
     */
    entry?: DocumentPortalEntryEnum | DocumentTypeEntryEnum;
};
/**
 * The entry of the document portal.
 * @enum
 */
export declare enum DocumentPortalEntryEnum {
    /** Home */
    Home = "home",
    /** Create */
    Create = "create",
    /** Favorites */
    Favorites = "favorites",
    /** Categories */
    Categories = "categories",
    /** Monitoring */
    Monitoring = "monitoring",
    /** Recycle Bin */
    RecycleBin = "recycleBin",
    /** Drafts */
    Drafts = "drafts",
    /** Personal Categories */
    PersonalCategories = "personalCategories"
}
/**
 * The document type entry of the document portal or resource portal.
 * @enum
 */
export declare enum DocumentTypeEntryEnum {
    /** Data Sources */
    Datasource = "datasource",
    /** Data Models */
    DataModel = "dataModel",
    /** Datasets */
    Dataset = "dataset",
    /** Iot Data */
    Iot = "iot",
    /** Dashboards */
    Dashboard = "dashboard",
    /** Reports */
    Report = "report",
    /** Document Binders */
    DocumentBinder = "documentBinder",
    /** Web Pages */
    Webpage = "webpage",
    /** Dashboard Templates */
    DashboardTemplate = "dashboardTemplate",
    /** Component Templates */
    VizTemplate = "vizTemplate",
    /** 3D Scenes */
    '3dScene' = "3dScene",
    /** 3D Models */
    '3dModel' = "3dModel",
    /** Report Templates */
    ReportTemplate = "reportTemplate",
    /** Report Master Reports */
    ReportMasterReport = "reportMasterReport",
    /** Language Resources */
    LanguageResource = "languageResource",
    /** Floor Plans */
    FloorPlan = "floorPlan",
    /** Fonts */
    Font = "font",
    /** Themes */
    Theme = "theme",
    /** Images */
    Image = "image"
}
/** Document portal initialization options. */
export type DocumentPortalInitOption = InitOptionBase & DocumentPortalInitOptionCore;
export type DocumentPortalInitOptionFull = InitOption & {
    customizeOption?: DocumentPortalInitOptionCore;
};
export type ResourcePortalInitOptionCore = {
    /**
     * A flag specifying whether to hide the avatar menu.
     * @example
     * hideAvatarMenu: false
     */
    hideAvatarMenu?: boolean;
    /**
     * A flag specifying whether to hide the welcome screen.
     * @example
     * hideWelcomeScreen: false
     */
    hideWelcomeScreen?: boolean;
    /**
     * The language of the resource portal.
     * @example
     * lng: 'zh'
     */
    lng?: string;
    /**
     * The entry of the resource portal.
     * @example
     * entry: 'home'
     */
    entry?: ResourceEntryEnum | DocumentTypeEntryEnum;
};
/**
 * The entry of the resource portal.
 * @enum
 */
export declare enum ResourceEntryEnum {
    Categories = "categories",
    Drafts = "drafts",
    Create = "create",
    Monitoring = "monitoring",
    RecycleBin = "recycleBin"
}
/** Resource portal initialization options. */
export type ResourcePortalInitOption = InitOptionBase & ResourcePortalInitOptionCore;
export type ResourcePortalInitOptionFull = InitOption & {
    customizeOption?: ResourcePortalInitOptionCore;
};
export type AdminPortalInitOptionCore = {
    /**
     * A flag specifying whether to hide the welcome screen.
     * @example
     * hideWelcomeScreen: false
     */
    hideWelcomeScreen?: boolean;
    /**
     * The language of the admin portal.
     * @example
     * lng: 'zh'
     */
    lng?: string;
    /**
     * The entry of the admin portal.
     * @example
     * entry: 'home'
     */
    entry?: AdminEntryEnum;
};
/**
 * The entry of the admin portal.
 * @enum
 */
export declare enum AdminEntryEnum {
    /** Configuration */
    Configuration = "configuration",
    /** Account */
    Account = "account",
    /** Security */
    Security = "security",
    /** System Management */
    SystemManagement = "systemManagement",
    /** Documents */
    Documents = "documents",
    /** Search */
    Search = "search"
}
/** Admin portal initialization options. */
export type AdminPortalInitOption = InitOptionBase & AdminPortalInitOptionCore;
export type AdminPortalInitOptionFull = InitOption & {
    customizeOption?: AdminPortalInitOptionCore;
};
/**
 * @private
 * Portal integration information
*/
export type PortalIntegrationInfo = {
    edition: string;
    cssUrl: string;
};
